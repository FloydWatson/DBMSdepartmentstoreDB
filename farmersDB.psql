
-- ----------------------------------------------------------
-- TABLES
-- ----------------------------------------------------------

CREATE TABLE address(
    address_id serial PRIMARY KEY NOT NULL,
    street_address VARCHAR(100) NOT NULL,
    city VARCHAR(50) NOT NULL,
    region VARCHAR(50) NOT NULL,
    zip_code VARCHAR(10),
    country VARCHAR(40) NOT NULL

);

-- ----------------------------------------------------------

CREATE TABLE contact_details(
    contact_details_id serial PRIMARY KEY NOT NULL,
    email VARCHAR(50) NOT NULL,
    phone_number VARCHAR(25) NOT NULL,
    address_id INT  --- FK from address
   
);

-- ----------------------------------------------------------

CREATE TABLE club_card(
    club_card_id serial PRIMARY KEY NOT NULL,
    expiry_date DATE NOT NULL,
    card_number VARCHAR(25) NOT NULL

);

-- ----------------------------------------------------------

CREATE TABLE reward(
    reward_id serial PRIMARY KEY NOT NULL,
    account_id INT, --- FK from farmers_club_account
    reward_type VARCHAR(20) NOT NULL,
    reward_description VARCHAR(250)

);

-- ----------------------------------------------------------

CREATE TABLE farmers_club_account(
    account_id serial PRIMARY KEY NOT NULL,
    customer_id INT, -- FK from customer
    user_name VARCHAR(20) NOT NULL,
    points FLOAT(6),
    club_card_id INT, -- FK from club_card
    store_id INT -- FK from store

);

-- ----------------------------------------------------------

CREATE TABLE customer(
    customer_id serial PRIMARY KEY NOT NULL,
    given_name VARCHAR(25) NOT NULL,
    family_name VARCHAR(25) NOT NULL,
    contact_details_id INT -- FK from contact_details   

);

-- ----------------------------------------------------------

CREATE TABLE supplier(
    supplier_id serial PRIMARY KEY NOT NULL,
    company_name VARCHAR(25) NOT NULL,
    contact_name VARCHAR(25),
    contact_details_id INT -- FK from contact_details  

);

-- ----------------------------------------------------------

CREATE TABLE employee(
    employee_id serial PRIMARY KEY NOT NULL,
    given_name VARCHAR(25) NOT NULL,
    family_name VARCHAR(25) NOT NULL,
    contact_details_id INT, -- FK from contact_details 
    job_id INT, -- FK from job
    salary FLOAT(10) NOT NULL,
    manager_id INT, -- FK from employee
    department_id INT, -- FK from department_id
    pay_info_id INT -- FK from pay_info    

);

-- ----------------------------------------------------------

CREATE TABLE job(
    job_id serial PRIMARY KEY NOT NULL,
    job_title VARCHAR(25) NOT NULL,
    min_salary FLOAT(10),
    max_salary FLOAT(10)

);

-- ----------------------------------------------------------

CREATE TABLE pay_info(
    pay_info_id serial PRIMARY KEY NOT NULL,
    frequency VARCHAR(15) NOT NULL,
    account VARCHAR(25) NOT NULL

);

-- ----------------------------------------------------------

CREATE TABLE department(
    department_id serial PRIMARY KEY NOT NULL,
    department_name VARCHAR(25) NOT NULL,
    store_id INT -- FK from store
    
);

-- ----------------------------------------------------------

CREATE TABLE store(
    store_id serial PRIMARY KEY NOT NULL,
    contact_details_id INT, -- FK from contact_details
    store_name VARCHAR(25)   

);

-- ----------------------------------------------------------

CREATE TABLE shipper(
    shipper_id serial PRIMARY KEY NOT NULL,
    shipper_name VARCHAR(30) NOT NULL,
    phone_number VARCHAR(20) NOT NULL

);

-- ----------------------------------------------------------

CREATE TABLE shipping(
    shipping_id serial PRIMARY KEY NOT NULL,
    shipped_date DATE,
    shipper_id INT, -- FK from shipper
    address_id INT -- FK from address

);

-- ----------------------------------------------------------

CREATE TABLE order_detail(
    order_detail_id serial PRIMARY KEY NOT NULL,
    customer_id INT, -- FK from customer
    employee_id INT, -- FK from employee
    order_date DATE,
    order_status VARCHAR(10),
    shipping_id INT, -- FK from shipping
    freight FLOAT(7),
    store_id INT, -- FK from store
    sub_total FLOAT(7),
    total FLOAT(7)

);

-- ----------------------------------------------------------

CREATE TABLE order_line(
    order_line_id serial PRIMARY KEY NOT NULL,
    order_detail_id INT, -- FK from order_detail
    product_id INT, -- FK from product
    quantity FLOAT(3) NOT NULL, 
    discount FLOAT(3)

);

-- ----------------------------------------------------------

CREATE TABLE category(
    category_id serial PRIMARY KEY NOT NULL,
    department_id INT, -- FK from department
    category_name VARCHAR(25) NOT NULL,
    description VARCHAR(150)

);

-- ----------------------------------------------------------

CREATE TABLE product(
    product_id serial PRIMARY KEY NOT NULL,
    product_name VARCHAR(150) NOT NULL,
    brand_id INT, -- FK from brand
    product_display_id INT -- FK from product_display

);

-- ----------------------------------------------------------

CREATE TABLE stock(
    stock_id serial PRIMARY KEY NOT NULL,
    product_id INT, -- FK from product
    supplier_id INT, -- FK from supplier
    category_id INT, -- FK from category
    department_id INT, -- FK from department
    store_id INT, -- FK from store
    unit_price FLOAT(7) NOT NULL,
    unit_in_stock FLOAT(4),
    unit_on_hold FLOAT(4),
    unit_available FLOAT(4),
    discontinued CHAR(1)

);

-- ----------------------------------------------------------

CREATE TABLE brand(
    brand_id serial PRIMARY KEY NOT NULL,
    brand_name VARCHAR(25) NOT NULL,
    brand_logo BYTEA

);

-- ----------------------------------------------------------

CREATE TABLE product_display(
    product_display_id serial PRIMARY KEY NOT NULL,
    product_description VARCHAR(250),
    product_image BYTEA,
    return_policy VARCHAR(250)

);

-- ----------------------------------------------------------

CREATE TABLE product_promotion(
    product_promotion_id serial PRIMARY KEY NOT NULL,
    promotion_id INT, -- FK from promotion
    product_id INT -- FK from product

);

-- ----------------------------------------------------------

CREATE TABLE promotion(
    promotion_id serial PRIMARY KEY NOT NULL,
    promotion_name VARCHAR(25) NOT NULL,
    promotion_discount FLOAT(3),
    promotion_details VARCHAR(250),
    promotion_start_date DATE,
    promotion_end_date DATE

);

-- ----------------------------------------------------------
-- INSERT VALUES
-- ----------------------------------------------------------

INSERT INTO address
    (street_address, city, region, zip_code, country)
VALUES
    ('123 Fake street', 'Fakeville', 'Fake Carolina', '4124', 'USF'),
    ('101 Fake street', 'Fakeville', 'Fake Carolina', '4124', 'USF'),
    ('128 Fake street', 'Fakeville', 'Fake Carolina', '4124', 'USF'),
    ('9b Fake street', 'Fakeville', 'Fake Carolina', '4124', 'USF'),
    ('503 Grove road', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('142 Fredrick street', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('1/3 Willowpark road', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('123 Kenedy road', 'Napier', 'Hawkes Bay', '4124', 'New Zealand'),
    ('100 Georgia street', 'Napier', 'Hawkes Bay', '4124', 'New Zealand'),
    ('123 Flat Bush School road', 'Auckland', 'Auckland', '4124', 'New Zealand'),
    ('10 Broadhurst road', 'Auckland', 'Auckland', '4124', 'New Zealand'),
    ('123 Waterloo street', 'Daniverke', 'Manawatu', '4124', 'New Zealand'),
    ('123 Employee street', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('123 Manager street', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('123 Store street', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand'),
    ('123 Supplier street', 'Hastings', 'Hawkes Bay', '4124', 'New Zealand');

-- ----------------------------------------------------------

INSERT INTO contact_details 
    (email, phone_number, address_id)
VALUES
    ('fakemail@gmail.com', '0213324421', 1),
    ('testmail@gmail.com', '8765432', 2),
    ('geemail@gmail.com', '021322123', 3),
    ('xtramail@xtra.com', '1234567', 4),
    ('hotmail@hotmail.com', '0800838383', 5),
    ('bobtereme@gmail.com', '0800754321', 6),
    ('floyds@gmail.com', '027654342', 7),
    ('floydisnt@gmail.com', '7432143', 8),
    ('youwish@gmail.com', '023443243', 9),
    ('legitas@gmail.com', '03212455', 10),
    ('notfake@gmail.com', '068764248', 11),
    ('isfake@gmail.com', '06321415', 12),
    ('employee@gmail.com', '068764248', 13),
    ('manager@gmail.com', '068764248', 14),
    ('hastingsstore@gmail.com', '068764248', 15),
    ('suppliers@gmail.com', '068764248', 16);

-- ----------------------------------------------------------

INSERT INTO store
    (contact_details_id, store_name)
VALUES
    (15, 'Hastings');

-- ----------------------------------------------------------

INSERT INTO department 
    (department_name, store_id)
VALUES
    ('Beauty', 1),
    ('Woman', 1),
    ('Men', 1),
    ('Children', 1),
    ('Toys', 1),
    ('Home', 1),
    ('Electrical', 1);

-- ----------------------------------------------------------

INSERT INTO customer
    (given_name, family_name, contact_details_id)
VALUES
    ('Waka', 'Istheman', 1),
    ('Floyd', 'Isnottheman', 2),
    ('Gee', 'Mail', 3),
    ('Extra', 'Mail', 4),
    ('Hot', 'Mail', 5),
    ('Bob', 'Tereme', 6),
    ('Fake', 'Name', 7),
    ('Notfake', 'Name', 8),
    ('Homer', 'Simpson', 9),
    ('Marge', 'Simpson', 10),
    ('Peter', 'Griffin', 11),
    ('Lois', 'Griffin', 12);

-- ----------------------------------------------------------

INSERT INTO club_card
    (expiry_date, card_number)
VALUES
    (date('now') + interval '1 year', '1234232'),
    (date('now') + interval '1 year', '1234561'),
    (date('now') + interval '1 year', '1234123'),
    (date('now') + interval '1 year', '1234515');
   
-- ----------------------------------------------------------

INSERT INTO farmers_club_account
    (customer_id, user_name, points, club_card_id, store_id)
VALUES
    (1, 'wakaistheman', 25, 1, 1),
    (9, 'homiehomer', 50, 2, 1),
    (6, 'bobtereme', 0, 3, 1),
    (11, 'petergee', 25, 4, 1);

-- ----------------------------------------------------------

INSERT INTO reward
    (account_id, reward_type, reward_description)
VALUES
    (2, 'flat_rate', '$5 dollars off');

-- ----------------------------------------------------------

INSERT INTO job
    (job_title, min_salary, max_salary)
VALUES
    ('retail_assistant', 16.5, 20.00),
    ('department_manager', 20.00, 25.50),
    ('store_manager', 26.00, 35.00);

-- ----------------------------------------------------------

INSERT INTO pay_info 
    (frequency, account)
VALUES
    ('weekly', '0123212314'),
    ('weekly', '0123234235'),
    ('weekly', '0123534225'),
    ('weekly', '0123885688'),
    ('weekly', '0123568356'),
    ('weekly', '0123837634'),
    ('weekly', '0123252745'),
    ('weekly', '0123253673'),
    ('weekly', '0123636473'),
    ('weekly', '0123793030'),
    ('weekly', '0123054721'),
    ('weekly', '0123000976'),
    ('weekly', '0123574777'),
    ('weekly', '0123777434');

-- ----------------------------------------------------------

INSERT INTO employee
    (given_name, family_name, contact_details_id, job_id, salary, manager_id, department_id, pay_info_id)
VALUES
    
    ('Janice', 'Smith', 13, 1, 16.50, 3, 1, 1),
    ('John', 'Smith', 13, 1, 16.00, 3, 1, 2), 
    ('Brit', 'Sams', 14, 2, 20.50, 14, 1, 3),
    ('James', 'Jones', 13, 1, 16.50, 5, 2, 4),
    ('Jimmy', 'Johnson', 14, 2, 20.50, 14, 2, 5),      
    ('Timmy', 'Thompson', 13, 1, 16.50, 7, 3, 6),  
    ('Sarah', 'Sarahson', 14, 2, 20.50, 14, 3, 7),    
    ('Johno', 'Johnathon', 13, 1, 16.50, 9, 4, 8),   
    ('Shamus', 'Shaneson', 14, 2, 20.50, 14, 4, 9),   
    ('Floyd', 'Floydson', 13, 1, 20.00, 12, 5, 10),
    ('Peter', 'Parker', 13, 1, 16.50, 12, 5, 11),
    ('Lani', 'Lowson', 14, 2, 25.00, 14, 5, 12),
    ('Justice', 'James', 14, 2, 20.50, 14, 6, 13),
    ('Petey', 'McGee', 14, 3, 26.50, 14, 7, 14);
    
-- ----------------------------------------------------------

INSERT INTO shipper
    (shipper_name, phone_number)
VALUES
    ('NZ Couriers', '0800434343'),
    ('NZ Post', '0800454545');

-- ----------------------------------------------------------

INSERT INTO shipping
    (shipped_date, shipper_id, address_id)
VALUES
    (date('now'), 1, 2),
    (date('now'), 1, 3),
    (date('now'), 2, 7),
    (date('now'), 1, 7);

-- ----------------------------------------------------------

INSERT INTO category
    (department_id, category_name, description)
VALUES
    (1, 'Make Up', ''),
    (1, 'Perfume', ''),
    (1,'Skin Care', ''),
    (1, 'Nail Care', ''),
    (2, 'Fashion', ''),
    (2, 'Sleep Wear', ''),
    (2, 'Lingerie', ''),
    (2, 'Thermals', ''),
    (3, 'Mens Clothing', ''),
    (3, 'Underwear', ''),
    (3, 'Grooming', ''),
    (3, 'Sleep Wear', ''),
    (4, 'Baby', ''),
    (4, 'Girls', ''),
    (4, 'Boys', ''),
    (4, 'Underwear', ''),
    (5, 'Best Selling', ''),
    (5, 'Games', ''),
    (5, 'Lego', ''),
    (5, 'Cars', ''),
    (5, 'Home of Nerf', ''),
    (6, 'Bedding', ''),
    (6, 'Lounge', ''),
    (6, 'Dining', ''),
    (6, 'Beds', ''),
    (6, 'Kitchen', ''),
    (6, 'Home Appliances', ''),
    (6, 'Personal Care', ''),
    (6, 'Whiteware', '');
    
-- ----------------------------------------------------------

INSERT INTO promotion
    (promotion_name, promotion_discount, promotion_details, promotion_start_date, promotion_end_date)
VALUES
    ('Fortnite Nerf Sale', 15, '15% off Fortnite Nerf products', date('now') + interval '1 week', date('now'));

-- ----------------------------------------------------------

INSERT INTO brand
    (brand_name)
VALUES
    ('benefit'),
    ('Bobbi Brown'),
    ('Clairns'),
    ('Whistle'),
    ('Oliver Black'),
    ('Bendon'),
    ('Gasoline'),
    ('Jockey'),
    ('Tarnish'),
    ('Chisel'),
    ('Jolly Jumper'),
    ('Nerf'),
    ('Paw Patrol'),
    ('Barbie'),
    ('Hasbro Games'),
    ('Bey Blades'),
    ('Fisher Price'),
    ('MADD'),
    ('Baccarat'),
    ('Domani'),
    ('Sheridan'),
    ('Your Home and Garden'),
    ('Panasonic'),
    ('Samsung'),
    ('Fisher & Paykel'),
    ('Haier'),
    ('Sun Beam'),
    ('Breville'),
    ('Phillips'),
    ('Lego');

-- ----------------------------------------------------------

INSERT INTO supplier
    (company_name, contact_name, contact_details_id)
VALUES
    ('Toys are us MEGA MART', 'James', 16),
    ('Beauty Products are us', 'Steph', 16),
    ('Clothes are us', 'Georgio', 16),
    ('Everything else is us', 'Jack', 16);

-- ----------------------------------------------------------

INSERT INTO product_display
    (product_description, return_policy)
VALUES
    ('Make up', ''),
    ('Make up', ''),
    ('Three shot Nerf Gun', ''),
    ('Tommy gun by nerf', ''),
    ('Big boy machine gun by Nerf', ''),
    ('Fortnite rocket launcher by Nerf', ''),
    ('Fortnite shotgun by Nerf', ''),
    ('Fortnite pistol by Nerf', ''),
    ('Fortnite AR by Nerf', ''),
    ('Protective Nerf goggles', ''),
    ('Little Fortnite Nerf gun', ''),
    ('Big mag Nerf gun', ''),
    ('Multishooter Nerf gun', ''),
    ('Clear Nerf gun', ''),
    ('Zombie Nerf gun', ''),
    ('Zombie Nerf gun', ''),
    ('Big boy Nerf gun', ''),
    ('Operation but with issues', ''),
    ('New Monopoly', ''),
    ('New Cluedo', ''),
    ('New game of life', ''),
    ('Plumber game', ''),
    ('Porcupine game', '');

-- ----------------------------------------------------------

INSERT INTO product
    (product_name, brand_id, product_display_id)
VALUES
    ('benefit BADgal BANG! in brightening blue', 1, 1),
    ('benefit Roller Lash Curling Mascara', 1, 2),
    ('Nerf Elite Trilogy DS 16', 12, 3),
    ('Nerf Mega Megalodon', 12, 4),
    ('Nerf Elite Titan', 12, 5),
    ('Nerf Fortnite RL Blaster', 12, 6),
    ('Nerf Fortnite TS Blaster', 12, 7),
    ('Nerf Fortnite Suppressed Pistol', 12, 8),
    ('Nerf Fortnite AR-L Blaster', 12, 9),
    ('Nerf Elite Battle Goggles', 12, 10),
    ('Nerf Fortnite Microshots Blaster, Assorted', 12, 11),
    ('Nerf Elite Rukkus ICS-8', 12, 12),
    ('Nerf AccuStrike Mega Bulldog', 12, 13),
    ('Nerf Modulus Ghost Ops Shadow ICS-6', 12, 14),
    ('Nerf Zombie Strike Quadrot', 12, 15),
    ('Nerf Zombie Survival System Nail Biter', 12, 16),
    ('Nerf Infinus', 12, 17),
    ('Hasbro Games Botched Operation', 15, 18),
    ('Hasbro Games Monopoly LOL Surprise', 15, 19),
    ('Hasbro Games Clue - Lost in Vegas', 15, 20),
    ('Hasbro Games Game of Life Quarter Life Crisis', 15, 21),
    ('Hasbro Games Plumbers Pants', 15, 22),
    ('Hasbro Games Porcupine Pop', 15, 23);

-- ----------------------------------------------------------

INSERT INTO stock
    (product_id, supplier_id, category_id, department_id, store_id, unit_price, unit_in_stock, unit_on_hold, unit_available, discontinued)
VALUES
    (1, 2, 1, 1, 1, 46.00, 6, 0, 6, 'n'),
    (2, 2, 1, 1, 1, 46.00, 20, 0, 20, 'n'),
    (3, 1, 21, 5, 1, 59.99, 5, 0, 5, 'n'),
    (4, 1, 21, 5, 1, 59.99, 5, 0, 5, 'n'),
    (5, 1, 21, 5, 1, 159.99, 5, 0, 5, 'n'),
    (6, 1, 21, 5, 1, 54.99, 5, 0, 5, 'n'),
    (7, 1, 21, 5, 1, 74.99, 5, 0, 5, 'n'),
    (8, 1, 21, 5, 1, 39.99, 5, 0, 5, 'n'),
    (9, 1, 21, 5, 1, 89.99, 5, 0, 5, 'n'),
    (10, 1, 21, 5, 1, 19.99, 5, 0, 5, 'n'),
    (11, 1, 21, 5, 1, 14.99, 5, 0, 5, 'n'),
    (12, 1, 21, 5, 1, 34.99, 5, 0, 5, 'n'),
    (13, 1, 21, 5, 1, 34.99, 5, 0, 5, 'n'),
    (14, 1, 21, 5, 1, 49.99, 5, 0, 5, 'n'),
    (15, 1, 21, 5, 1, 16.99, 5, 0, 5, 'n'),
    (16, 1, 21, 5, 1, 39.99, 5, 0, 5, 'n'),
    (17, 1, 21, 5, 1, 149.99, 5, 0, 5, 'n'),
    (18, 1, 18, 5, 1, 44.99, 5, 0, 5, 'n'),
    (19, 1, 18, 5, 1, 49.99, 5, 0, 5, 'n'),
    (20, 1, 18, 5, 1, 44.99, 5, 0, 5, 'n'),
    (21, 1, 18, 5, 1, 44.99, 5, 0, 5, 'n'),
    (22, 1, 18, 5, 1, 34.99, 5, 0, 5, 'n'),
    (23, 1, 18, 5, 1, 34.99, 5, 0, 5, 'n');

-- ----------------------------------------------------------

INSERT INTO product_promotion
    (product_id, promotion_id)
VALUES
    (6, 1),
    (7, 1),
    (8, 1),
    (9, 1);

-- ----------------------------------------------------------

INSERT INTO order_detail
    (customer_id, employee_id, order_date, order_status, shipping_id, freight, store_id)
VALUES
    (2, 1, date('now') - interval '1 day', 'SHIPPED', 1, 5.00, 1),
    (3, 1, date('now') - interval '1 day', 'SHIPPED', 2, 5.00, 1),
    (7, 12, date('now') - interval '1 day', 'SHIPPED', 3, 5.00, 1),
    (7, 12, date('now') - interval '1 day', 'SHIPPED', 3, 5.00, 1);

-- ----------------------------------------------------------
    
INSERT INTO order_line
    (order_detail_id, product_id, quantity, discount)
VALUES
    (1, 1, 1, 0),
    (2, 2, 2, 0),
    (3, 4, 1, 0),
    (4, 14, 1, 0),
    (4, 5, 1, 0);

-- ----------------------------------------------------------
-- CONSTRAINTS
-- ----------------------------------------------------------

ALTER TABLE reward ADD 
    CONSTRAINT account_id FOREIGN KEY (account_id)
        REFERENCES farmers_club_account (account_id);

-- ----------------------------------------------------------

ALTER TABLE contact_details ADD 
    CONSTRAINT address_id FOREIGN KEY (address_id)
        REFERENCES address (address_id);

-- ----------------------------------------------------------

ALTER TABLE farmers_club_account ADD  
    CONSTRAINT customer_id FOREIGN KEY (customer_id)
        REFERENCES customer (customer_id);

ALTER TABLE farmers_club_account ADD 
    CONSTRAINT club_card_id FOREIGN KEY (club_card_id)
        REFERENCES club_card (club_card_id);

ALTER TABLE farmers_club_account ADD 
    CONSTRAINT store_id FOREIGN KEY (store_id)
        REFERENCES store (store_id);

-- ----------------------------------------------------------

ALTER TABLE customer ADD
    CONSTRAINT contact_details_id FOREIGN KEY (contact_details_id)
        REFERENCES contact_details (contact_details_id);

-- ----------------------------------------------------------

ALTER TABLE supplier ADD
    CONSTRAINT contact_details_id FOREIGN KEY (contact_details_id)
        REFERENCES contact_details (contact_details_id);

-- ----------------------------------------------------------

ALTER TABLE employee ADD
    CONSTRAINT contact_details_id FOREIGN KEY (contact_details_id)
        REFERENCES contact_details (contact_details_id);

ALTER TABLE employee ADD
    CONSTRAINT job_id FOREIGN KEY (job_id)
        REFERENCES job (job_id);

ALTER TABLE employee ADD
    CONSTRAINT manager_id FOREIGN KEY (manager_id)
        REFERENCES employee (employee_id);

ALTER TABLE employee ADD        
    CONSTRAINT department_id FOREIGN KEY (department_id)
        REFERENCES department (department_id);

ALTER TABLE employee ADD
    CONSTRAINT pay_info_id FOREIGN KEY (pay_info_id)
        REFERENCES pay_info (pay_info_id);

-- ----------------------------------------------------------

ALTER TABLE department ADD
    CONSTRAINT store_id FOREIGN KEY (store_id)
        REFERENCES store (store_id);

-- ----------------------------------------------------------

ALTER TABLE store ADD
    CONSTRAINT contact_details_id FOREIGN KEY (contact_details_id)
        REFERENCES contact_details (contact_details_id);

-- ----------------------------------------------------------

ALTER TABLE shipping ADD
    CONSTRAINT shipper_id FOREIGN KEY (shipper_id)
        REFERENCES shipper (shipper_id);

ALTER TABLE shipping ADD 
    CONSTRAINT address_id FOREIGN KEY (address_id)
        REFERENCES address (address_id);

-- ----------------------------------------------------------

ALTER TABLE order_detail ADD
    CONSTRAINT customer_id FOREIGN KEY (customer_id)
        REFERENCES customer (customer_id);

ALTER TABLE order_detail ADD
    CONSTRAINT employee_id FOREIGN KEY (employee_id)
        REFERENCES employee (employee_id);

ALTER TABLE order_detail ADD
    CONSTRAINT shipping_id FOREIGN KEY (shipping_id)
        REFERENCES shipping (shipping_id);

ALTER TABLE order_detail ADD
    CONSTRAINT store_id FOREIGN KEY (store_id)
        REFERENCES store (store_id);

-- ---------------------------------------------------------- 

ALTER TABLE order_line ADD
    CONSTRAINT order_detail_id FOREIGN KEY (order_detail_id)
        REFERENCES order_detail (order_detail_id);

ALTER TABLE order_line ADD 
    CONSTRAINT product_id FOREIGN KEY (product_id)
        REFERENCES product (product_id);

-- ----------------------------------------------------------

ALTER TABLE category ADD 
    CONSTRAINT department_id FOREIGN KEY (department_id)
        REFERENCES department (department_id);

-- ----------------------------------------------------------

ALTER TABLE product ADD        
    CONSTRAINT brand_id FOREIGN KEY (brand_id)
        REFERENCES brand (brand_id);

ALTER TABLE product ADD
    CONSTRAINT product_display_id FOREIGN KEY (product_display_id)
        REFERENCES product_display (product_display_id);

-- ----------------------------------------------------------

ALTER TABLE stock ADD
    CONSTRAINT supplier_id FOREIGN KEY (supplier_id)
        REFERENCES supplier (supplier_id);

ALTER TABLE stock ADD
    CONSTRAINT category_id FOREIGN KEY (category_id)
        REFERENCES category (category_id);

ALTER TABLE stock ADD
    CONSTRAINT store_id FOREIGN KEY (store_id)
        REFERENCES store (store_id);

ALTER TABLE stock ADD
    CONSTRAINT department_id FOREIGN KEY (department_id)
        REFERENCES department (department_id);

ALTER TABLE stock ADD
    CONSTRAINT product_id FOREIGN KEY (product_id)
        REFERENCES product (product_id);

-- ----------------------------------------------------------

ALTER TABLE product_promotion ADD
    CONSTRAINT promotion_id FOREIGN KEY (promotion_id)
        REFERENCES promotion (promotion_id);

ALTER TABLE product_promotion ADD 
    CONSTRAINT product_id FOREIGN KEY (product_id)
        REFERENCES product (product_id);

-- ----------------------------------------------------------
-- INDEX
-- ----------------------------------------------------------

CREATE INDEX index_address_city
    ON address(city); -- search addresses by city

CREATE INDEX index_address_region
    ON address(region); -- search addresses by region

CREATE INDEX index_address_country
    ON address(country); -- search addresses by country

-- ----------------------------------------------------------

CREATE INDEX index_reward_account_id
    ON reward(account_id); -- search rewards for account

-- ----------------------------------------------------------

CREATE INDEX index_customer_given_name
    ON customer(given_name); -- search customers by name

CREATE INDEX index_customer_family_name
    ON customer(family_name); -- search customers by name

-- ----------------------------------------------------------

CREATE INDEX index_supplier_company_name
    ON supplier(company_name); -- search suppliers by company name

-- ----------------------------------------------------------

CREATE INDEX index_employee_given_name
    ON employee(given_name); -- search employees by name

CREATE INDEX index_employee_family_name
    ON employee(family_name); -- search employees by name

CREATE INDEX index_employee_job_id
    ON employee(job_id); -- search employees by job

CREATE INDEX index_employee_manager_id
    ON employee(manager_id); -- search employees by manager they fall under

CREATE INDEX index_employee_department_id
    ON employee(department_id); -- search employees by department they work in

-- ----------------------------------------------------------

CREATE INDEX index_job_title
    ON job(job_title); -- search jobs by title

-- ----------------------------------------------------------

CREATE INDEX index_pay_info_frequency
    ON pay_info(frequency); -- search pay info by frequency paid

-- ----------------------------------------------------------

CREATE INDEX index_department_store_id
    ON department(store_id); -- search departments by what store they are in

-- ----------------------------------------------------------

CREATE INDEX index_store_name
    ON store(store_name); -- search stores by name

-- ----------------------------------------------------------

CREATE INDEX index_shipper_name
    ON shipper(shipper_name); -- search shippers by name

-- ----------------------------------------------------------

CREATE INDEX index_shipping_shipper_id
    ON shipping(shipper_id); -- search shippings by shipper

CREATE INDEX index_address_id
    ON shipping(address_id); -- search shippings for an address

-- ----------------------------------------------------------

CREATE INDEX index_order_detail_customer_id
    ON order_detail(customer_id); -- search orders for customers

CREATE INDEX index_order_detail_employee_id
    ON order_detail(employee_id); -- search orders by staff member involoved

CREATE INDEX index_order_detail_order_status
    ON order_detail(order_status); -- search orders by their status

CREATE INDEX index_order_detail_store_id
    ON order_detail(store_id); -- search orders by store

-- ----------------------------------------------------------

CREATE INDEX index_category_name
    ON category(category_name); -- search category by name

CREATE INDEX index_category_department_id
    ON category(department_id); -- search category by department

-- ----------------------------------------------------------

CREATE INDEX index_product_name
    ON product(product_name); -- search product by name

CREATE INDEX index_product_brand_id
    ON product(brand_id); -- search product by brand

-- ----------------------------------------------------------

CREATE INDEX index_stock_supplier_id
    ON stock(supplier_id); -- search stock by supplier

CREATE INDEX index_stock_category_id
    ON stock(category_id); -- search stock by category

CREATE INDEX index_stock_department_id
    ON stock(department_id); -- search stock by department

CREATE INDEX index_stock_store_id
    ON stock(store_id); -- search stock by store

CREATE INDEX index_stock_unit_in_stock
    ON stock(unit_in_stock); -- search stock by amount stocked

-- ----------------------------------------------------------

CREATE INDEX index_brand_name
    ON brand(brand_name); -- search brand by name

-- ----------------------------------------------------------

CREATE INDEX index_product_promotion_product
    ON product_promotion(product_id); -- search product_promotions by product

CREATE INDEX index_product_promotion_promotion
    ON product_promotion(promotion_id); -- search product_promotions by promotion

-- ----------------------------------------------------------

CREATE INDEX index_promotion_name
    ON promotion(promotion_name); -- search promotion by name

CREATE INDEX index_promotion_start_date
    ON promotion(promotion_start_date); -- search promotion by start date

CREATE INDEX index_promotion_end_date
    ON promotion(promotion_end_date); -- search promotion by end date

-- ----------------------------------------------------------
-- VIEW
-- ----------------------------------------------------------

-- first view. account and reward from store

DROP VIEW IF EXISTS club_members_list_view;
CREATE VIEW club_members_list_view AS
SELECT t1.account_id, t1.store_id, t4.store_name, t3.customer_id, t3.given_name, t3.family_name, t1.user_name, t1.points, t2.reward_type, t2.reward_description, t2.reward_id
FROM farmers_club_account as t1
LEFT OUTER JOIN reward as t2 ON (t1.account_id = t2.account_id)
LEFT OUTER JOIN customer as t3 ON (t1.customer_id = t3.customer_id)
LEFT OUTER JOIN store as t4 ON (t1.store_id = t4.store_id);

-- Search for club members list by store. Store 1 = Hastings. Or can search by Store name with -- WHERE store_name = 'Hastings'
-- SELECT * FROM club_members_list_view
-- WHERE store_id = 1

-- ----------------------------------------------------------

-- second view. product list from given category

DROP VIEW IF EXISTS product_list_view;
CREATE VIEW product_list_view as
SELECT t3.category_id, t1.product_name, t2.brand_name, t3.unit_price, t3.unit_in_stock, t3.unit_available, t3.discontinued, t1.brand_id, t1.product_id
FROM product as t1
LEFT OUTER JOIN brand as t2 ON (t1.brand_id = t2.brand_id)
LEFT OUTER JOIN stock as t3 ON (t1.product_id = t3.product_id);

-- Search for Products by brand name. can also search by category
-- SELECT product_name, brand_name, unit_price, unit_in_stock, discontinued FROM product_list_view 
-- WHERE brand_name = 'Nerf'

-- ----------------------------------------------------------

-- third view. stock list for store

DROP VIEW IF EXISTS stock_list_for_store_view;
CREATE VIEW stock_list_for_store_view as
SELECT t1.store_id, t1.store_name, t2.department_id, t2.category_id, t3.product_name, t2.unit_in_stock, t2.unit_available, t2.product_id 
FROM store as t1
LEFT OUTER JOIN stock as t2 ON (t1.store_id = t2.store_id)
LEFT OUTER JOIN product as t3 ON (t2.product_id = t3.product_id);

-- Search Stock list by store. Store 1 = Hastings. Or can search by Store name with -- WHERE store_name = 'Hastings'
-- SELECT * FROM stock_list_for_store_view
-- WHERE store_id = 1

-- ----------------------------------------------------------

-- fourth view

DROP VIEW IF EXISTS sales_invoice_view;
CREATE VIEW sales_invoice_view as
SELECT t1.customer_id, t1.given_name, t1.family_name, t2.order_status, t2.sub_total, t2.total, t2.freight, t4.product_name, t5.unit_price, t3.quantity, t6.brand_name, t7.given_name as staff_given_name, t7.family_name as staff_family_name, t8.store_name, t9.shipped_date, t10.shipper_name,  t9.shipper_id, t3.product_id, t2.shipping_id, t2.store_id, t2.employee_id, t4.brand_id
FROM customer as t1
LEFT OUTER JOIN order_detail as t2 ON (t1.customer_id = t2.customer_id)
LEFT OUTER JOIN order_line as t3 ON (t2.order_detail_id = t3.order_detail_id)
LEFT OUTER JOIN product as t4 ON (t3.product_id = t4.product_id)
LEFT OUTER JOIN stock as t5 ON (t4.product_id = t5.product_id)
LEFT OUTER JOIN brand as t6 ON (t4.brand_id = t6.brand_id)
LEFT OUTER JOIN employee as t7 ON (t2.employee_id = t7.employee_id)
LEFT OUTER JOIN store as t8 ON (t2.store_id = t8.store_id)
LEFT OUTER JOIN shipping as t9 ON (t2.shipping_id = t9.shipping_id)
LEFT OUTER JOIN shipper as t10 ON (t9.shipper_id = t10.shipper_id);

-- Search Sales invoices by Customer. Could also do search by given name + family name
-- SELECT * FROM sales_invoice_view
-- WHERE customer_id = 7

-- -------------------------------------------------------

-- ----------------------------------------------------------
-- PROCEDURE
-- ----------------------------------------------------------

-- first set of procedures is for creating sales invoice totals. I have split the methods up into smaller methods then call them all in the last one

-- -- ----------------------------------------------------------
-- -- order detail sub total
-- -- ----------------------------------------------------------


CREATE OR REPLACE PROCEDURE order_detail_sub_total(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
		
	UPDATE order_detail
	SET sub_total = t2.quantity * t3.unit_price
	FROM order_detail as t1
	INNER JOIN order_line as t2 ON (t1.order_detail_id = t2.order_detail_id)
	INNER JOIN stock as t3 ON (t2.product_id = t3.product_id)
	WHERE order_detail.order_detail_id = _id and t2.order_detail_id = _id;	
	
	COMMIT;
END;
$$;



-- -- ----------------------------------------------------------
-- -- order detail total
-- -- ----------------------------------------------------------


CREATE OR REPLACE PROCEDURE order_detail_total(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
		
	UPDATE order_detail
	SET total = sub_total + freight
	WHERE order_detail.order_detail_id = _id;	
	
	COMMIT;
END;
$$;



-- ------------------------------------------------
-- both totals
-- ------------------------------------------------

CREATE OR REPLACE PROCEDURE set_order_totals(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
	CALL order_detail_sub_total(_id);
	CALL order_detail_total(_id);
	COMMIT;
END;
$$;


-- Call these functions to check order lines before function called. call again to see update

-- SELECT * FROM order_line
-- WHERE order_detail_id = '003'

-- SELECT * FROM order_detail
-- WHERE order_detail_id = '003'


-- call this function to update by order id

-- CALL set_order_totals('003')

-- ------------------------------------------------
-- return items procedures
-- ------------------------------------------------

-- below are stored procedures for returning an order. I have split the methods up into smaller methods then call them all in the last one

-- ------------------------------------------------
-- return items to stock
-- ------------------------------------------------

CREATE OR REPLACE PROCEDURE return_item_to_stock(_id VARCHAR)
LANGUAGE plpgsql 
AS $$ 

BEGIN 
	UPDATE stock 
	SET t4.unit_in_stock = t4.unit_in_stock + t2.quantity 
	FROM product as t1 
	INNER JOIN order_line as t2 ON (t1.product_id = t2.product_id) 
    INNER JOIN order_detail as t3 ON (t2.order_detail_id = t3.order_detail_id)
    INNER JOIN stock as t4 ON (t1.product_id = t4.product_id)
	WHERE product.product_id = t2.product_id and t2.order_detail_id = _id  and t3.order_status IS DISTINCT FROM 'RETURN'; 
	COMMIT; 
	
	COMMIT;
END;
$$; 


-- ------------------------------------------------
-- update order status
-- ------------------------------------------------
 
CREATE OR REPLACE PROCEDURE return_order_detail_update(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
	UPDATE order_detail
	SET order_status = 'RETURN'
	WHERE order_detail.order_detail_id = _id and order_detail.order_status IS DISTINCT FROM 'RETURN';
	COMMIT;
	
	COMMIT;
END;
$$;

-- ------------------------------------------------
-- set units available
-- ------------------------------------------------

CREATE OR REPLACE PROCEDURE return_product_available_update(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
	UPDATE stock
	SET unit_available = stock.unit_in_stock - stock.unit_on_hold 
	FROM product as t1
	INNER JOIN order_line as t2 ON (t2.product_id = t2.product_id)
    INNER JOIN order_detail as t3 ON (t2.order_detail_id = t3.order_detail_id)
    INNER JOIN stock as t4 ON (t1.product_id = t4.product_id)
	WHERE product.product_id = t2.product_id and t2.order_detail_id = _id and t3.order_status IS DISTINCT FROM 'RETURN';
	
	COMMIT;
END;
$$;
 
-- ------------------------------------------------
-- call all methods
-- ------------------------------------------------

CREATE OR REPLACE PROCEDURE return_order(_id VARCHAR)
LANGUAGE plpgsql
AS $$

BEGIN
 	CALL return_item_to_stock(_id); 
	CALL return_product_available_update(_id);
	CALL return_order_detail_update(_id);
	
	
	COMMIT;
END;
$$;

-- SELECT * FROM order_detail
--  WHERE order_detail_id = '001'
 
--   SELECT * FROM order_line
--  WHERE order_detail_id = '001'
 
--  SELECT * FROM product
--  WHERE product_id = '001'
 
-- CALL return_order('001')

-- ------------------------------------------------
-- disount items in category by $5 if inbetween date
-- ------------------------------------------------

CREATE OR REPLACE PROCEDURE discount_item_in_date(_id VARCHAR, _date DATE)
LANGUAGE plpgsql
AS $$

BEGIN
	UPDATE stock
	SET unit_price = unit_price - 5 
	FROM stock
	WHERE category_id = _id and _date > date('now') - interval '1 day' and _date < date('now') + interval '10 day';
	
	COMMIT;
END;
$$;